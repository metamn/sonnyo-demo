// Calls a JSON API via AJAX
// - the container has to have a `data-url` set up to perfom the call
// - the response is sent back via a callback function
var jsonAPICall = function(containerID, callback) {
  var container = document.querySelector(containerID);
  var url = container.dataset.url;

  // JSON AJAX Call to an API endpoint
  // - http://www.w3schools.com/json/json_http.asp
  var xmlhttp = new XMLHttpRequest();
  xmlhttp.open("GET", url, true);
  xmlhttp.send();

  // Process request
  xmlhttp.onreadystatechange = function() {
    if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
      var result = JSON.parse(xmlhttp.responseText);
      callback(result);
    }
  }
}

// Read the `figure` element's responsive images and breakpoints for later reuse
// - the data gathered is passed to a callback function
var responsiveImageURL = function(elementID, callback) {
  var element = document.querySelector(elementID);
  var picture = element.querySelector('.picture');

  // Collect images and breakpoints from `picture`
  // - <source media="(min-width: 600px)" srcset="/assets/images/placeholder-16-9_tablet.png, /assets/images/placeholder-16-9_tablet2x.png 2x">
  // - start with mobile then go to desktop; media queries stop at the first match
  for (var i = picture.children.length - 1; i >= 0 ; i--) {
    var srcset = picture.children[i].srcset;
    var media = picture.children[i].media;
    var images = srcset.split(', ');

    for (var j = 0; j < images.length; j++) {
      var x2 = images[j].split(' 2x');
      var retina = (x2.length > 1);

      callback(element, x2[0], media, retina);
    }
  }
};

// Read the `figure` element's responsive images and breakpoints
// Set as background image with `matchMedia` coming from `Picturefill`
var setBackgroundImage = function(elementID) {

  // Set a responsive background image using `mathcMedia`
  function setResponsiveBackgroundImage(element, image, breakpoint, retina) {
    var mediaQuery = "only screen and " + breakpoint;

    if (retina) {
      // This might not be cross platform compatible ....
      mediaQuery += " and (-webkit-min-device-pixel-ratio: 2)";
    }

    if (matchMedia(mediaQuery).matches) {
      element.style.backgroundImage = "url('" + image + "')";
    }
  }

  responsiveImageURL(elementID, setResponsiveBackgroundImage);
};

// Read the `figure` element's responsive images and breakpoints
// Set as poster using `matchMedia` coming from `Picturefill`
// elementID is the container holding the video and the poster image
var videoResponsivePoster = function(elementID) {

  // Set a responsive poster using `mathcMedia`
  function setVideoResponsivePoster(element, image, breakpoint, retina) {
    var video = element.querySelector('.video');

    var mediaQuery = "only screen and " + breakpoint;

    if (retina) {
      // This might not be cross platform compatible ....
      mediaQuery += " and (-webkit-min-device-pixel-ratio: 2)";
    }

    if (matchMedia(mediaQuery).matches) {
      video.poster = image;
    }
  }

  responsiveImageURL(elementID, setVideoResponsivePoster);
};

// Adding the class `img--loaded` for images after they are all fully loaded
// - 'containerID' can be like '.hero' or '.articles .article'
var imagesLoading = function(containerID) {
  var containers = document.querySelectorAll(containerID);

  for (var i = 0; i < containers.length; i++) {
    imageLoading(containers[i]);
  }
}

// Adding the class `img-loaded` for images inside a single container
// - uses the imagesLoaded external library
var imageLoading = function(container) {
  var images = container.querySelectorAll('.img');
  var figures = container.querySelectorAll('.figure');

  imagesLoaded(container, function(instance) {
    for (var i = 0; i < images.length; i++) {
      figures[i].classList.add('figure--loaded');
      images[i].classList.add('img--loaded');
    }
  });
}

imagesLoading('.map');

var news = function(containerID) {
  jsonAPICall(containerID, function(result) {
    var data = result.data;

    for (var i = 0; i < 3; i++) {
      var item = document.createElement('div');
      item.className = 'news-item';

      var message = document.createElement('div');
      message.className = 'news-item__message';

      // Split ro / hu entries into <p>
      var m = data[i].message;
      m = m.split("\n\n").join("</p><p>");
      message.innerHTML = '<p>' + m + '</p>';


      var date = document.createElement('div');
      date.className = 'news-item__date';

      var date2 = document.createElement('span');
      date2.className = 'date';

      // created_time: 2015-02-26T13:33:25+0000
      var d = data[i].created_time.split("T");
      if (d.length > 0) {
        date2.innerHTML = d[0].replace(/\-/g, " / ");
      }

      date.appendChild(date2);
      item.appendChild(date);
      item.appendChild(message);

      var container = document.querySelector(containerID);
      container.appendChild(item);
    }
  });
}

news('.news .news__body');

var slider = function(slide, bullets) {

  // Slides
  var slides = document.querySelectorAll(slide);
  var slideCount = slides.length;
  var pos = 0;
  var direction = 'prev';

  // - move out of viewport all inactive slides
  function setTransform() {
    for (var i = 0; i < slideCount; i++ ) {
      // We do these manually instead of loading Modernizr which is not used elsewhere
      // - from https://github.com/thebird/Swipe/blob/master/swipe.js
      slides[i].style.webkitTransform = 'translate(' + ((i + pos) * slides[0].offsetWidth) + 'px, 0)' + 'translateZ(0)';

      slides[i].style.MozTransform =
      slides[i].style.msTransform =
      slides[i].style.OTransform =
      slides[i].style.transform = 'translateX(' + ((i + pos) * slides[0].offsetWidth) + 'px)';
    }
  }

  // - initialize slides in a responsive way
  setTransform();
  window.addEventListener('resize', setTransform);


  // Add swipe to each slide
  for (var i = 0; i < slides.length; i++) {
    var hammer = new Hammer(slides[i]);
    hammer.get('swipe').set({
      direction: Hammer.DIRECTION_HORIZONTAL,
      threshold: 1,
      velocity: 0.1
    });

    hammer.on("swipeleft", function() {
      previousSlide(1);
      removeActiveBulletClass();
      setActiveBulletClass();
    });

    hammer.on("swiperight", function() {
      nextSlide(1);
      removeActiveBulletClass();
      setActiveBulletClass();
    });
  }



  // Bullets
  var bullets = document.querySelectorAll(bullets);

  // - add click event to bullets
  for (var i = 0; i < bullets.length; i++) {
    bullets[i].addEventListener('click', clickBullet, false);
  }

  // - click on a bullet
  function clickBullet(event) {
    active = this.classList.contains('active');

    if (!active) {
      moveSlide(this);
      removeActiveBulletClass();
      this.classList.add('active');
    }
  }

  // - move slide
  function moveSlide(bullet) {
    current = bulletIndex(bullet);
    step = current - Math.abs(pos);

    if (Math.abs(pos) < current ) {
      previousSlide(step);
    } else {
      nextSlide(-step);
    }
  }



  // Helpers

  // Return the index of the clicked element
  function bulletIndex(bullet) {
    var siblings = bullet.parentNode.childNodes;
    for (var i = 0; i < siblings.length; i++) {
      if (bullet == siblings[i]) break;
    }
    return i - 1;
  }


  // Clear active state for all bullets
  function removeActiveBulletClass() {
    for (var i = 0; i < bullets.length; i++) {
      bullets[i].classList.remove('active');
    }
  }


  // Set active state for a bullet
  function setActiveBulletClass() {
    for (var i = 0; i < bullets.length; i++) {
      if (slides[i].style['transform'] == 'translateX(0px)') {
        bullets[i].classList.add('active');
      }
    }
  }


  // Get previous slide
  // - it moves prev with 'step' slides
  function previousSlide(step) {
    pos = Math.max(pos - step, -(slideCount - 1));
    setTransform();
  }

  // Get next slide
  // - it moves next with 'step' slides
  function nextSlide(step) {
    pos = Math.min(pos + step, 0);
    setTransform();
  }
}


slider('.slider__slides .slide', '.slider__bullets div');

var weather = function(containerID) {
  jsonAPICall(containerID, function(result) {
    var container = document.querySelector(containerID);

    var celsius = container.querySelector('.openweather__celsius .value');
    celsius.innerHTML = Math.round(result.main.temp);

    var icon = container.querySelector('.openweather__icon .img');
    icon.src += result.weather[0].icon + ".png";
  });
}

weather('.weather .openweather');

videoResponsivePoster('.webcam');

imagesLoading('.slider .slide');
